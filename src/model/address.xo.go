// Package model contains the types for schema 'sample'.
package model

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// Address represents a row from '"sample"."address"'.
type Address struct {
	ID    uint   `json:"id"`    // id
	Email string `json:"email"` // email

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Address exists in the database.
func (a *Address) Exists() bool {
	return a._exists
}

// Deleted provides information if the Address has been deleted from the database.
func (a *Address) Deleted() bool {
	return a._deleted
}

// Insert inserts the Address to the database.
func (a *Address) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO "sample"."address" (` +
		`"email"` +
		`) VALUES (` +
		`?` +
		`)`

	// run query
	XOLog(sqlstr, a.Email)
	res, err := db.Exec(sqlstr, a.Email)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	a.ID = uint(id)
	a._exists = true

	return nil
}

// Update updates the Address in the database.
func (a *Address) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if a._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE "sample"."address" SET ` +
		`"email" = ?` +
		` WHERE "id" = ?`

	// run query
	XOLog(sqlstr, a.Email, a.ID)
	_, err = db.Exec(sqlstr, a.Email, a.ID)
	return err
}

// Save saves the Address to the database.
func (a *Address) Save(db XODB) error {
	if a.Exists() {
		return a.Update(db)
	}

	return a.Insert(db)
}

// Delete deletes the Address from the database.
func (a *Address) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return nil
	}

	// if deleted, bail
	if a._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM "sample"."address" WHERE "id" = ?`

	// run query
	XOLog(sqlstr, a.ID)
	_, err = db.Exec(sqlstr, a.ID)
	if err != nil {
		return err
	}

	// set deleted
	a._deleted = true

	return nil
}

// AddressByID retrieves a row from '"sample"."address"' as a Address.
//
// Generated from index 'address_id_pkey'.
func AddressByID(db XODB, id uint) (*Address, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"id", "email" ` +
		`FROM "sample"."address" ` +
		`WHERE "id" = ?`

	// run query
	XOLog(sqlstr, id)
	a := Address{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&a.ID, &a.Email)
	if err != nil {
		return nil, err
	}

	return &a, nil
}
